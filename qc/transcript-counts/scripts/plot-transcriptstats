#! /usr/bin/env Rscript-base
# This script plots HTSeq transcript stats QC 

# Set the version:
.version <- '1.0.0'

# A function to write a given message to stderr:
log.message <- function(..., verbose=NA){
    if(is.na(verbose)){
        verb <- get0('.verbose', ifnotfound=TRUE)
    } else {
        verb <- verbose
    }
    if(identical(verb, TRUE)){
        message(sprintf(...))
        flush(stderr())
    }
}

# A function to exit with a given error:
error <- function(..., exit.code=1, verbose=TRUE){
    log.message(sprintf('ERROR: %s', sprintf(...)), verbose=verbose)
    if(!identical(interactive(), TRUE)){
        quit(save='no', status=exit.code)
    }
}

# A function to quietly load a vector libraries from character strings:
loadLibrary <- function(x, verbose=NA){
    for(l in x){
        log.message('loading library "%s"', l, verbose=verbose)
        res <- suppressWarnings(suppressPackageStartupMessages(require(l, character.only=TRUE, quietly=TRUE)))
        if(!identical(res, TRUE)) error('failed to load package "%s"', l)
    }
}

# Create pretty scientific labels:
# https://stackoverflow.com/questions/10762287/how-can-i-format-axis-labels-with-exponents-with-ggplot2-and-scales
scientific <- function(x){
    ifelse(x==0, "0", parse(text=gsub("[+]", "", gsub("e", " %*% 10^", scales:::scientific_format()(x)))))
}

# Build & process the CLI:
loadLibrary('argparse', verbose=FALSE)
parser <- ArgumentParser(description='Generate QC plots from HTSeq counts & metacount files')
parser$add_argument('-V', '--version', dest='version', default=FALSE, action='store_true', help='print version information')
parser$add_argument('-v', '--verbose', dest='verbose', default=FALSE, action='store_true', help='provide verbose output')
parser$add_argument('-p', '--output-prefix', dest='output_prefix', metavar='prefix', default='', help='output plot prefix')
parser$add_argument(dest='counts_file', metavar='file', help='input counts file')
parser$add_argument(dest='metacounts_file', metavar='file', help='input metacounts file')
parser$add_argument(dest='output_dir', metavar='dir', default='.', help='output plot folder')
args <- parser$parse_args()
# args <- list(
#     'verbose' = TRUE,
#     'version' = FALSE,
#     'output_prefix' = '2570-v98-',
#     'counts_file' = '/lustre/scratch119/realdata/mdt1/team113/projects/2570_sebaceous_tumour_RNAseq/transcript-counts/2570-transcript-counts-v98.txt',
#     'metacounts_file' = '/lustre/scratch119/realdata/mdt1/team113/projects/2570_sebaceous_tumour_RNAseq/transcript-counts/2570-metafeature-counts-v98.txt',
#     'output_dir' = '/lustre/scratch119/realdata/mdt1/team113/projects/2570_sebaceous_tumour_RNAseq/QC/transcript-counts/results'
# )
.verbose <- args$verbose

# Process the version data if required:
if(identical(args$version, TRUE)){
    log.message('plot-bamstats %s', .version, verbose=TRUE)
    if(identical(.verbose, TRUE)){
        log.message('\nsession info:', verbose=TRUE)
        sink(stderr())
        print(sessionInfo())
        sink()
    }
    quit(save='no', status=0)
}

# Load the necessary libraries:
loadLibrary(c('ggplot2'))

# Load the input files:
n.samples <- ncol(read.table(args$counts_file, sep='\t', nrows=1)) - 1
log.message('reading input counts for %d samples...', n.samples)
d.counts <- as.matrix(read.table(args$counts_file, sep='\t', colClasses=c('character', rep('numeric', n.samples)), row.names=1, header=TRUE))
log.message('reading input metafeature counts for %d samples...', n.samples)
m.counts <- as.matrix(read.table(args$metacounts_file, sep='\t', colClasses=c('character', rep('numeric', n.samples)), row.names=1, header=TRUE))

# Check column headers match:
if(!all(colnames(d.counts) == colnames(m.counts))) error('header mismatch')

# Calculate the per-sample total counts:
log.message('calculating sample totals...')
sample.totals <- colSums(d.counts) + colSums(m.counts)

# "Normalise" metacounts to sample totals:
log.message('normalising metafeature counts...')
m.norm <- sweep(m.counts, 2, sample.totals, FUN='/')

# Create ggplot-formatted normalised data:
m <- data.frame(
    'sample' = factor(rep(colnames(m.norm), each=nrow(m.norm))),
    'feature' = factor(gsub('__', '', rep(rownames(m.norm), ncol(m.norm)))),
    'count' = as.vector(m.norm)
)

s <- data.frame(
    'sample' = factor(colnames(d.counts)),
    'count' = colSums(d.counts)
)

# Plot normalised counts as bar plots:
output.filename <- file.path(args$output_dir, sprintf('%smetafeature-counts.pdf', args$output_prefix))
log.message('plotting metafeature count QC plots to "%s"...', output.filename)
pdf(output.filename, width=16, height=4)
for(f in levels(m$feature)){
    g <- ggplot(m[m$feature==f,], aes(x=sample, y=count, fill=sample))
    g <- g + geom_col(show.legend=FALSE)
    g <- g + theme(axis.ticks=element_blank(), panel.grid=element_blank(), panel.background=element_blank(), panel.border=element_blank())
    g <- g + theme(axis.title.x=element_blank(), axis.text.x=element_text(angle=90, vjust=0.5, size=4, family='mono'))
    g <- g + ylab(sprintf('Normalised Counts (%s)', f))
    g <- g + ggtitle(label=sprintf('%s', f))
    plot(g)
}
x <- dev.off()

# Plot the OK read counts across all samples:
output.filename <- file.path(args$output_dir, sprintf('%stranscript-counts.pdf', args$output_prefix))
log.message('plotting feature count QC plots to "%s"...', output.filename)
g <- ggplot(s, aes(x=sample, y=count, fill=sample))
g <- g + geom_col(show.legend=FALSE)
g <- g + theme(axis.ticks=element_blank(), panel.grid=element_blank(), panel.background=element_blank(), panel.border=element_blank())
g <- g + theme(axis.title.x=element_blank(), axis.text.x=element_text(angle=90, vjust=0.5, size=4, family='mono'))
g <- g + scale_y_continuous(labels=scientific)
g <- g + ylab('Total Read Counts')
g <- g + ggtitle(label='Total valid read counts')
ggsave(output.filename, width=16, height=4)
